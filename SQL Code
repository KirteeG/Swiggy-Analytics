-- Find the Customers Who Have Not Placed Any Order
SELECT u.user_id, u.name
From users u
LEFT JOIN orders o 
ON u.user_id = o.user_id
Where o.order_id IS NULL;

-- What is the average price of each food type?
SELECT f.f_name, AVG(m.price) AS AvgPrice
FROM menu m
JOIN food f ON m.f_id = f.f_id
GROUP BY f.f_name
ORDER BY AvgPrice;

-- What is the average price of food for each restaurant?
WITH restaurant_details AS (
    SELECT 
        r.r_id,
        r.R_Name,
        m.price
    FROM restaurants r
    INNER JOIN orders o ON r.r_id = o.r_id
    INNER JOIN menu m ON r.r_id = m.r_id
)
SELECT 
    R_Name AS "Restaurant Name", 
    '$ ' || ROUND(AVG(price), 2) AS "Average Price"
FROM restaurant_details
GROUP BY R_Name
ORDER BY R_Name;

-- Find the top restaurant in terms of the number of orders for all months
SELECT * FROM restaurants, orders;
SELECT * FROM orders; 

WITH res AS (
    SELECT 
        o.date,
        r.r_name
    FROM orders o
    INNER JOIN restaurants r
        ON o.r_id = r.r_id
),
res_grouped AS (
    SELECT 
        DATE_FORMAT(date, '%m') AS order_month,
        r_name,
        COUNT(*) AS order_count
    FROM res
    GROUP BY DATE_FORMAT(date, '%m'), r_name
),
res_ranking AS (
    SELECT 
        order_month,
        r_name,
        RANK() OVER (PARTITION BY order_month ORDER BY order_count DESC) AS res_rank
    FROM res_grouped
)
SELECT 
    order_month AS ORDER_MONTH,
    r_name AS R_NAME
FROM res_ranking
WHERE res_rank = 1;

--  Find the number of orders for each restaurant in June
SELECT 
    r.r_name AS "Restaurant name",
    MONTH(o.date) AS "Month",
    COUNT(o.order_id) AS "Order Count"
FROM orders o
INNER JOIN restaurants r ON o.r_id = r.r_id
WHERE o.date BETWEEN '01-06-2022' AND '20-06-2022'
GROUP BY r.r_name, MONTH(o.date)
ORDER BY COUNT(o.order_id) DESC;

-- Restaurants with monthly revenue greater than 500.
SELECT m.r_id, MONTH(o.date) As Month, SUM(m.price) AS Revenue
FROM menu m
INNER JOIN orders o
ON m.r_id = o.r_id
GROUP BY MONTH(o.date)
HAVING SUM(m.price) >500
ORDER BY SUM(m.price), MONTH(o.date)  ASC;

-- Show all orders with order details for a particular customer in a particular date range (15th May 2022 to 15th June 2022)
SELECT *
FROM orders
WHERE date BETWEEN '15-05-2022' AND '15-07-2022';

--  Which restaurant has the highest number of repeat customers?
WITH repeated_cust AS (
    SELECT 
        r.r_name,
        o.user_id,
        COUNT(*) AS order_count
    FROM restaurants r
    INNER JOIN orders o ON r.r_id = o.r_id
    GROUP BY r.r_name, o.user_id
    HAVING COUNT(*) > 1
),
loyal_cust AS (
    SELECT 
        r_name,
        COUNT(user_id) AS Repeated_customers
    FROM repeated_cust
    GROUP BY r_name
    ORDER BY COUNT(user_id) DESC
)
SELECT * 
FROM loyal_cust 
LIMIT 1;

-- Month over month revenue growth of swiggy
WITH X AS
(
SELECT Month(o.date) As "Month", SUM(m.price) AS "Revenue"
FROM orders o
INNER JOIN menu m
ON o.r_id = m.r_id
GROUP BY Month(o.date)
)
SELECT Month, 
SUM(Revenue) OVER (order by Month) AS "Month On Month Growth"
FROM X;

-- Find the top 3 most ordered dish
SELECT f.f_name AS Name, 
       COUNT(*) AS Order_Count 
FROM order_details od
INNER JOIN food f ON f.f_id = od.f_id
GROUP BY f.f_name
ORDER BY Order_Count DESC
LIMIT 3;

-- Month over month revenue growth of each restaurant.
WITH X AS (
    SELECT 
        r.r_name AS `Restaurant Name`,
        MONTH(o.date) AS `Month`,
        SUM(m.price) AS `Revenue`
    FROM 
        orders o
    INNER JOIN 
        menu m ON o.r_id = m.r_id
    INNER JOIN 
        restaurants r ON o.r_id = r.r_id
    GROUP BY 
        r.r_name, MONTH(o.date)
)
SELECT 
    `Month`, 
    `Restaurant Name`,
    SUM(`Revenue`) OVER (PARTITION BY `Restaurant Name` ORDER BY `Month`) AS `Month On Month Growth`
FROM 
    X;

-- What is the overall revenue generated by the 
-- platform during a specific time period?
SELECT SUM(amount) AS 'Total Revenue'
FROM orders
WHERE date between '01-07-22' AND '31-07-22';

-- How many orders were delivered by each delivery partner and what is their average delivery rating?
SELECT dp.partner_id AS ID, dp.partner_name AS Name, COUNT(*) AS DELIVERY_COUNT, AVG(O.DELIVERY_RATING) AS AVG_DELIVERY_RATING
FROM orders o
JOIN delivery_partner dp ON o.partner_id = dp.partner_id
GROUP BY dp.partner_id, dp.partner_name;

-- What is the average rating for each restaurant and delivery partner?
SELECT r.r_name As 'Restaurant Name', 
AVG(delivery_rating) AS 'Avarage Delivery Rating',
AVG(restaurant_rating) AS 'Avarage restaurant Rating'
FROM orders o
JOIN restaurants r
ON o.r_id = r.r_id
GROUP BY r.r_name
ORDER BY r.r_name ASC;

-- What is the average order value per user?
SELECT AVG(amount) AS 'Average Order Value'
FROM orders
GROUP BY user_id;
